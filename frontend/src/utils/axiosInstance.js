// src/utils/axiosInstance.js
import axios from "axios";
import { BASE_URL } from "./config";
import { notify } from "./notify";
import { jwtDecode } from "jwt-decode";
const excludedUrls = [
  "/auth/login",
  "/auth/forgot-password",
  "/auth/reset-password",
];

const BASE_URL_ENTRY = process.env.REACT_APP_BASE_URL_API || BASE_URL;
console.log("BASE_URL_ENTRY: ", BASE_URL_ENTRY);

const axiosInstance = axios.create({
  baseURL: BASE_URL_ENTRY, // tu·ª≥ c√°ch b·∫°n config .env

  withCredentials: true, // n·∫øu b·∫°n d√πng cookie ƒë·ªÉ x√°c th·ª±c
});
function isTokenExpired(token) {
  if (!token) return true;

  try {
    const { exp } = jwtDecode(token);
    const now = Date.now() / 1000; // t√≠nh b·∫±ng gi√¢y
    return exp < now;
  } catch (e) {
    return true; // n·∫øu token l·ªói th√¨ coi nh∆∞ h·∫øt h·∫°n
  }
}

function logout(message, redirect = true) {
  localStorage.removeItem("user");
  notify(redirect ? "error" : "warning", "Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n", message, 2);
  setTimeout(
    () =>
      redirect
        ? (window.location.href = "/auth/login")
        : window.location.reload(),
    1000
  );
}
// G·∫Øn token + ki·ªÉm tra h·∫°n
axiosInstance.interceptors.request.use(
  (config) => {
    if (excludedUrls.includes(config.url)) {
      return config;
    }
    const userStr = localStorage.getItem("user");
    const user = userStr ? JSON.parse(userStr) : null;
    if (user && user.token) {
      if (isTokenExpired(user.token)) {
        logout("Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i", false);
        throw new axios.Cancel("M√£ token ƒë√£ h·∫øt h·∫°n");
      }
      config.headers.Authorization = `Bearer ${user.token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// B·∫°n c√≥ th·ªÉ th√™m interceptors ·ªü ƒë√¢y n·∫øu c·∫ßn
axiosInstance.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response && [401, 403].includes(error.response.status)) {
      // üßπ X√≥a token ho·∫∑c user kh·ªèi localStorage
      const errorMessage = error.response?.data?.message || "ƒê√£ c√≥ l·ªói x·∫£y ra";
      logout(errorMessage); // g·ªçi logout v·ªõi th√¥ng b√°o t·ª´ BE n·∫øu c√≥
    }

    return Promise.reject(error);
  }
);

export default axiosInstance;
