import moment from "moment";
import {
    sanitizeOrderInfo,
    signVnpayParams,
    verifyVnpaySignature,
} from "../utils/vnpay.js";
import Booking from "../models/Booking.js";
import BookingDetail from "../models/BookingDetail.js";
import Invoice from "../models/Invoice.js";
import Tour from "../models/Tour.js";
import TourService from "../models/TourService.js";

export const createPaymentUrl = async (req, res) => {
    try {
        // L·∫•y d·ªØ li·ªáu t·ª´ frontend g·ª≠i l√™n
        const { booking, invoiceSaved } = req.body;

        // T·∫°o c√°c tham s·ªë VNPay
        const ipAddr =
            req.headers["x-forwarded-for"] ||
            req.connection.remoteAddress ||
            "127.0.0.1";
        const tmnCode = process.env.VNP_TMNCODE;
        const secretKey = process.env.VNP_HASH_SECRET;
        const vnpUrl = process.env.VNP_URL;
        const returnUrl = `${process.env.CLIENT_URL}/payment-success`;
        const createDate = moment().format("YYYYMMDDHHmmss");
        const orderId = moment().format("HHmmss");

        // C√°c tham s·ªë thanh to√°n

        const orderInfo = `Thanh to√°n tour ${booking.name}`;
        const vnp_Params = {
            vnp_Version: "2.1.0",
            vnp_Command: "pay",
            vnp_TmnCode: tmnCode,
            vnp_Locale: "vn",
            vnp_CurrCode: "VND",
            vnp_TxnRef: invoiceSaved.id.toString(), // G·ª≠i ID c·ªßa Invoice nh∆∞ l√† m√£ giao d·ªãch
            vnp_OrderInfo: sanitizeOrderInfo(orderInfo),
            vnp_OrderType: "billpayment",
            vnp_Amount: invoiceSaved.finalAmount * 100, // ƒê∆°n v·ªã ti·ªÅn t·ªá l√† VND (VNPay y√™u c·∫ßu ph·∫£i nh√¢n v·ªõi 100)
            vnp_ReturnUrl: returnUrl,
            vnp_IpAddr: ipAddr,
            vnp_CreateDate: createDate,
        };

        // üîê K√Ω c√°c tham s·ªë (ph·∫£i encode gi√° tr·ªã)
        const signedHash = signVnpayParams(vnp_Params, secretKey);
        vnp_Params.vnp_SecureHash = signedHash;

        // üîó T·∫°o URL thanh to√°n (encode gi√° tr·ªã ƒë√∫ng chu·∫©n)
        const querystring = Object.entries(vnp_Params)
            .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)
            .join("&");

        const paymentUrl = `${vnpUrl}?${querystring}`;

        return res.json({ paymentUrl });
    } catch (error) {
        console.error("L·ªói khi t·∫°o URL thanh to√°n: ", error);
        return res.status(500).json({ message: "C√≥ l·ªói x·∫£y ra", error });
    }
};
export const beforeCreatePaymentUrl = async (req, res) => {
    try {
        // L·∫•y d·ªØ li·ªáu t·ª´ frontend g·ª≠i l√™n
        const { booking, selectedServices, totalPrice, price, tourId, user } =
            req.body;

        // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
        const { valid, message } = validateBookingData(
            booking,
            selectedServices,
            totalPrice,
            price,
            tourId
        );
        if (!valid) {
            return res.status(400).json({ message });
        }
        // T·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng Booking
        const bookingData = new Booking({
            tourId: tourId,
            name: booking.name,
            phone: booking.phone,
            startDate: booking.startDate,
            numberOfPeople: booking.numberOfPeople,
            totalPrice: totalPrice, // T·ªïng gi√° tr·ªã c·ªßa booking (tour + d·ªãch v·ª•)
            userId: user._id, // L∆∞u userId t·ª´ payload
        });

        const savedBooking = await bookingData.save();
        // T·∫°o BookingDetails cho c√°c Tour
        // L·∫•y h√≥a ƒë∆°n t·ª´ txnRef (d√πng txnRef l√†m tham chi·∫øu ƒë·ªÉ t√¨m invoice)
        const tourInfo = await Tour.findById(tourId);

        // T·∫°o promise cho booking tour
        const bookingTourPromise = new BookingDetail({
            bookingId: savedBooking._id,
            tourServiceId: tourId,
            itemType: "Tour",
            description: tourInfo.title,
            quantity: savedBooking.numberOfPeople,
            unitPrice: tourInfo.price,
            totalPrice:
                Number(savedBooking.numberOfPeople) * Number(tourInfo.price),
        }).save();

        // T·∫°o promise cho booking service n·∫øu c√≥
        let bookingDetailsPromises = [];
        if (selectedServices && selectedServices.length > 0) {
            bookingDetailsPromises = selectedServices.map((service) => {
                return new BookingDetail({
                    bookingId: savedBooking._id,
                    tourServiceId: service.serviceId._id,
                    itemType: "Service",
                    description: service.serviceId.description,
                    quantity: service.quantity,
                    unitPrice: service.serviceId.unitPrice,
                    totalPrice:
                        Number(service.quantity) *
                        Number(service.serviceId.unitPrice),
                }).save();
            });
        }

        // ‚úÖ Gom t·∫•t c·∫£ l·∫°i th√†nh 1 m·∫£ng r·ªìi await
        await Promise.all([bookingTourPromise, ...bookingDetailsPromises]);
        // T·∫°o Invoice cho vi·ªác thanh to√°n
        const invoice = new Invoice({
            bookingId: savedBooking._id,
            userId: savedBooking.userId, // Gi·∫£ s·ª≠ b·∫°n ƒë√£ c√≥ `userId` trong `booking`
            totalAmount: totalPrice, // T·ªïng ti·ªÅn c·∫ßn thanh to√°n
            discountAmount: 0, // Gi·∫£ s·ª≠ ch∆∞a c√≥ khuy·∫øn m√£i
            finalAmount: totalPrice, // Gi√° cu·ªëi c√πng sau gi·∫£m gi√° (n·∫øu c√≥)
            paymentStatus: "Ch∆∞a thanh to√°n", // Tr·∫°ng th√°i thanh to√°n ban ƒë·∫ßu
        });

        const savedInvoice = await invoice.save();
        // T·∫°o c√°c tham s·ªë VNPay

        return res.json({
            message: "T·∫°o th√¥ng tin bookings, bookingDetals th√†nh c√¥ng",
            data: savedInvoice,
        });
    } catch (error) {
        console.error("L·ªói khi t·∫°o URL thanh to√°n: ", error);
        return res.status(500).json({ message: "C√≥ l·ªói x·∫£y ra", error });
    }
};

const validateBookingData = (
    booking,
    selectedServices,
    totalPrice,
    price,
    tourId
) => {
    if (
        !booking ||
        !booking.name ||
        !booking.phone ||
        !booking.startDate ||
        !booking.numberOfPeople
    ) {
        return { valid: false, message: "Th√¥ng tin ƒë·∫∑t tour kh√¥ng ƒë·∫ßy ƒë·ªß!" };
    }

    // if (!selectedServices || selectedServices.length === 0) {
    //   return { valid: false, message: "C·∫ßn ph·∫£i ch·ªçn √≠t nh·∫•t m·ªôt d·ªãch v·ª•!" };
    // }

    if (!totalPrice || totalPrice <= 0) {
        return {
            valid: false,
            message: "T·ªïng gi√° tr·ªã c·ªßa booking kh√¥ng h·ª£p l·ªá!",
        };
    }

    if (!price || price <= 0) {
        return { valid: false, message: "Gi√° thanh to√°n kh√¥ng h·ª£p l·ªá!" };
    }

    if (!tourId) {
        return { valid: false, message: "ID tour kh√¥ng h·ª£p l·ªá!" };
    }

    return { valid: true };
};

export const vnpayIpnHandler = async (req, res) => {
    console.log("ƒêang x·ª≠ l√Ω c·∫≠p nh·∫≠t h√≥a ƒë∆°n (Invoice) ");
    try {
        // L·∫•y c√°c tham s·ªë t·ª´ query string VNPay g·ª≠i v·ªÅ
        const vnp_Params = req.query;

        // Ki·ªÉm tra ch·ªØ k√Ω c·ªßa VNPay ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh h·ª£p l·ªá c·ªßa callback
        const isValid = verifyVnpaySignature(vnp_Params);
        if (!isValid) {
            return res
                .status(400)
                .json({ message: "Ch·ªØ k√Ω VNPay kh√¥ng h·ª£p l·ªá!" });
        }

        // L·∫•y th√¥ng tin t·ª´ callback
        const { vnp_TxnRef, vnp_ResponseCode, vnp_Amount } = vnp_Params;
        const paymentStatus =
            vnp_ResponseCode === "00" ? "ƒê√£ thanh to√°n" : "Th·∫•t b·∫°i";

        // L·∫•y h√≥a ƒë∆°n t·ª´ txnRef (d√πng txnRef l√†m tham chi·∫øu ƒë·ªÉ t√¨m invoice)
        const invoice = await Invoice.findById(vnp_TxnRef);
        if (!invoice) {
            return res.status(404).json({ message: "H√≥a ƒë∆°n kh√¥ng t·ªìn t·∫°i!" });
        }

        // N·∫øu thanh to√°n th√†nh c√¥ng, c·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa Booking
        if (paymentStatus === "ƒê√£ thanh to√°n") {
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n trong Invoice
            invoice.paymentStatus = "ƒê√£ thanh to√°n";
            invoice.finalAmount = vnp_Amount / 100; // VNPay tr·∫£ ti·ªÅn theo ƒë∆°n v·ªã ti·ªÅn t·ªá nh·ªè nh·∫•t (VND)

            await invoice.save();

            const booking = await Booking.findById(invoice.bookingId);
            booking.status = "Ch·ªù x√°c nh·∫≠n"; // C·∫≠p nh·∫≠t tr·∫°ng th√°i Booking th√†nh "ƒê√£ x√°c nh·∫≠n"
            await booking.save();

            // Tr·ª´ s·ªë l∆∞·ª£ng trong Tour
            const tour = await Tour.findById(booking.tourId);
            if (tour) {
                tour.maxGroupSize -= booking.numberOfPeople;
                await tour.save();
            }
            // Tr·ª´ s·ªë l∆∞·ª£ng d·ªãch v·ª• trong TourService
            const tourService = await TourService.findOne({
                tourId: booking.tourId,
            });
            if (tourService) {
                const bookingDetails = await BookingDetail.find({
                    bookingId: booking._id,
                });

                for (const detail of bookingDetails) {
                    if (detail.itemType === "Service") {
                        const service = tourService.services.find(
                            (s) =>
                                s.serviceId.toString() ===
                                detail.tourServiceId.toString()
                        );
                        if (service) {
                            service.numberOfPeopl -= detail.quantity;
                        }
                    }
                }

                await tourService.save();
            }
        }
        console.log("C·∫≠p nh·∫≠t h√≥a ƒë∆°n (Invoice) th√†nh c√¥ng ");
        // Tr·∫£ v·ªÅ ph·∫£n h·ªìi cho VNPay
        res.status(200).json({
            message: "Thanh to√°n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng.",
        });
    } catch (error) {
        console.error("L·ªói khi x·ª≠ l√Ω callback thanh to√°n VNPay:", error);
        res.status(500).json({ message: "L·ªói h·ªá th·ªëng", error });
    }
};
